server {
        listen 80;
        server_name localhost;
        #ssl_certificate     /etc/nginx/ssl/nginx.crt;
        #ssl_certificate_key /etc/nginx/ssl/nginx.key;
        #ssl_protocols TLSv1.2 TLSv1.3;
        #ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
        #ssl_prefer_server_ciphers off;
        #ssl_dhparam /etc/nginx/dhparam;
        root /usr/share/nginx/html;
        sendfile on;
        default_type application/octet-stream;
        index index.html index.htm;
        include /etc/nginx/mime.types;
        gzip on;
        gzip_http_version 1.1;
        gzip_disable      "MSIE [1-6]\.";
        gzip_min_length   256;
        gzip_vary         on;
        gzip_proxied      expired no-cache no-store private auth;
        gzip_types        text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;
        gzip_comp_level   9;

        # location ~* \.(eot|ttf|woff|woff2|js|json)$ {
        #     add_header Access-Control-Allow-Origin *;
        # }
        # location ~ \.js {
        #     add_header Content-Type application/x-javascript;
        # }

        location / {

            ## Caching behaviour
            set $expires -1;
            set $cacheControl "no-store, no-cache, must-revalidate";

            ## assets will be chached
            if ($uri ~ /.*\.(js|css|jpg|jpeg|png|gif|svg|ico)$) {
                set $expires 1y;
                set $cacheControl "public, max-age=31536000, no-transform";
            }

            ## everything else wil not be chached
            add_header Cache-Control $cacheControl;
            expires $expires;


            #set $cors '';
            #if ($http_origin ~ '^http?://(localhost|www\.yourdomain\.com|www\.yourotherdomain\.com)') {
            #    set $cors 'true';
            #}

            #if ($cors = 'true') {
                add_header 'Access-Control-Allow-Origin' "$http_origin" always;
                add_header 'Access-Control-Allow-Credentials' 'true' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With' always;
                # required to be able to read Authorization header in frontend
                #add_header 'Access-Control-Expose-Headers' 'Authorization' always;
            #}

            if ($request_method = 'OPTIONS') {
                # Tell client that this pre-flight info is valid for 20 days
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;
            }


            try_files $uri $uri/ /index.html =404;
        }
}
